
lab2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000218  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080003c4  080003c4  000103c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080003d4  080003d4  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  080003d4  080003d4  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  080003d4  080003d4  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080003d4  080003d4  000103d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080003d8  080003d8  000103d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  080003dc  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020004  2**0
                  CONTENTS
 10 .bss          00000020  20000004  20000004  00020004  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000024  20000024  00020004  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 13 .debug_info   000011aa  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000045e  00000000  00000000  000211de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000001f0  00000000  00000000  00021640  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000188  00000000  00000000  00021830  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020dba  00000000  00000000  000219b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000020ff  00000000  00000000  00042772  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ca4be  00000000  00000000  00044871  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0010ed2f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000056c  00000000  00000000  0010ed80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000004 	.word	0x20000004
 80001c8:	00000000 	.word	0x00000000
 80001cc:	080003ac 	.word	0x080003ac

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000008 	.word	0x20000008
 80001e8:	080003ac 	.word	0x080003ac

080001ec <my_strcpy>:
    .thumb

    .global my_strcpy
my_strcpy:
loop_strcpy:
    LDRB    r2, [r0]
 80001ec:	7802      	ldrb	r2, [r0, #0]
    ADDS    r0, #1
 80001ee:	3001      	adds	r0, #1
    STRB    r2, [r1]
 80001f0:	700a      	strb	r2, [r1, #0]
    ADDS    r1, #1
 80001f2:	3101      	adds	r1, #1
    CMP     r2, #0
 80001f4:	2a00      	cmp	r2, #0
    BNE     loop_strcpy
 80001f6:	d1f9      	bne.n	80001ec <my_strcpy>
    BX      lr
 80001f8:	4770      	bx	lr

080001fa <my_capitalize>:

    .global my_capitalize
my_capitalize:
cap_loop:
    LDRB    r1, [r0]
 80001fa:	7801      	ldrb	r1, [r0, #0]
    CMP     r1, #'a'-1
 80001fc:	2960      	cmp	r1, #96	; 0x60
    BLS     cap_skip
 80001fe:	d903      	bls.n	8000208 <cap_skip>
    CMP     r1, #'z'
 8000200:	297a      	cmp	r1, #122	; 0x7a
    BHI     cap_skip
 8000202:	d801      	bhi.n	8000208 <cap_skip>
    SUBS    r1, #32
 8000204:	3920      	subs	r1, #32
    STRB    r1, [r0]
 8000206:	7001      	strb	r1, [r0, #0]

08000208 <cap_skip>:
cap_skip:
    ADDS    r0, r0, #1
 8000208:	3001      	adds	r0, #1
    CMP     r1, #0
 800020a:	2900      	cmp	r1, #0
    BNE     cap_loop
 800020c:	d1f5      	bne.n	80001fa <my_capitalize>
    BX      lr
 800020e:	4770      	bx	lr

08000210 <my_strrev>:

    .global my_strrev
my_strrev:
    PUSH    {r1-r5, lr}
 8000210:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    MOV     r1, r0
 8000212:	4601      	mov	r1, r0
    MOV     r2, r0
 8000214:	4602      	mov	r2, r0

08000216 <find_end>:
find_end:
    LDRB    r3, [r2]
 8000216:	7813      	ldrb	r3, [r2, #0]
    CMP     r3, #0
 8000218:	2b00      	cmp	r3, #0
    BEQ     end_found
 800021a:	d002      	beq.n	8000222 <end_found>
    ADD     r2, r2, #1
 800021c:	f102 0201 	add.w	r2, r2, #1
    B       find_end
 8000220:	e7f9      	b.n	8000216 <find_end>

08000222 <end_found>:
end_found:
    SUB     r2, r2, #1
 8000222:	f1a2 0201 	sub.w	r2, r2, #1

08000226 <rev_loop>:
rev_loop:
    CMP     r1, r2
 8000226:	4291      	cmp	r1, r2
    BHS     done
 8000228:	d208      	bcs.n	800023c <done>
    LDRB    r3, [r1]
 800022a:	780b      	ldrb	r3, [r1, #0]
    LDRB    r4, [r2]
 800022c:	7814      	ldrb	r4, [r2, #0]
    STRB    r4, [r1]
 800022e:	700c      	strb	r4, [r1, #0]
    STRB    r3, [r2]
 8000230:	7013      	strb	r3, [r2, #0]
    ADD     r1, r1, #1
 8000232:	f101 0101 	add.w	r1, r1, #1
    SUB     r2, r2, #1
 8000236:	f1a2 0201 	sub.w	r2, r2, #1
    B       rev_loop
 800023a:	e7f4      	b.n	8000226 <rev_loop>

0800023c <done>:
done:
    POP     {r1-r5, pc}
 800023c:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
	...

08000240 <main>:

/* -------------------------------------------------------------------
 * Main program
 * -------------------------------------------------------------------*/
int main(void)
{
 8000240:	b590      	push	{r4, r7, lr}
 8000242:	b08b      	sub	sp, #44	; 0x2c
 8000244:	af00      	add	r7, sp, #0
    const char a[] = "Hello world!";
 8000246:	4b09      	ldr	r3, [pc, #36]	; (800026c <main+0x2c>)
 8000248:	f107 0418 	add.w	r4, r7, #24
 800024c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800024e:	c407      	stmia	r4!, {r0, r1, r2}
 8000250:	7023      	strb	r3, [r4, #0]
    char b[20];
    //const char c[] = "abc";

    my_strcpy(a, b);      // Copy string a â†’ b
 8000252:	1d3a      	adds	r2, r7, #4
 8000254:	f107 0318 	add.w	r3, r7, #24
 8000258:	4611      	mov	r1, r2
 800025a:	4618      	mov	r0, r3
 800025c:	f7ff ffc6 	bl	80001ec <my_strcpy>
    //my_capitalize(b);     // Capitalize b
    my_strrev(b);         // Reverse string c
 8000260:	1d3b      	adds	r3, r7, #4
 8000262:	4618      	mov	r0, r3
 8000264:	f7ff ffd4 	bl	8000210 <my_strrev>

    while (1) {
 8000268:	e7fe      	b.n	8000268 <main+0x28>
 800026a:	bf00      	nop
 800026c:	080003c4 	.word	0x080003c4

08000270 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000270:	b480      	push	{r7}
 8000272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000274:	e7fe      	b.n	8000274 <NMI_Handler+0x4>

08000276 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000276:	b480      	push	{r7}
 8000278:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800027a:	e7fe      	b.n	800027a <HardFault_Handler+0x4>

0800027c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800027c:	b480      	push	{r7}
 800027e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000280:	e7fe      	b.n	8000280 <MemManage_Handler+0x4>

08000282 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000282:	b480      	push	{r7}
 8000284:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000286:	e7fe      	b.n	8000286 <BusFault_Handler+0x4>

08000288 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000288:	b480      	push	{r7}
 800028a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800028c:	e7fe      	b.n	800028c <UsageFault_Handler+0x4>

0800028e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800028e:	b480      	push	{r7}
 8000290:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000292:	bf00      	nop
 8000294:	46bd      	mov	sp, r7
 8000296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800029a:	4770      	bx	lr

0800029c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800029c:	b480      	push	{r7}
 800029e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80002a0:	bf00      	nop
 80002a2:	46bd      	mov	sp, r7
 80002a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a8:	4770      	bx	lr

080002aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80002aa:	b480      	push	{r7}
 80002ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80002ae:	bf00      	nop
 80002b0:	46bd      	mov	sp, r7
 80002b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b6:	4770      	bx	lr

080002b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80002b8:	b580      	push	{r7, lr}
 80002ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80002bc:	f000 f83e 	bl	800033c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80002c0:	bf00      	nop
 80002c2:	bd80      	pop	{r7, pc}

080002c4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80002c4:	b480      	push	{r7}
 80002c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80002c8:	4b06      	ldr	r3, [pc, #24]	; (80002e4 <SystemInit+0x20>)
 80002ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80002ce:	4a05      	ldr	r2, [pc, #20]	; (80002e4 <SystemInit+0x20>)
 80002d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80002d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80002d8:	bf00      	nop
 80002da:	46bd      	mov	sp, r7
 80002dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e0:	4770      	bx	lr
 80002e2:	bf00      	nop
 80002e4:	e000ed00 	.word	0xe000ed00

080002e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80002e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000320 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80002ec:	480d      	ldr	r0, [pc, #52]	; (8000324 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80002ee:	490e      	ldr	r1, [pc, #56]	; (8000328 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80002f0:	4a0e      	ldr	r2, [pc, #56]	; (800032c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80002f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002f4:	e002      	b.n	80002fc <LoopCopyDataInit>

080002f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002fa:	3304      	adds	r3, #4

080002fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000300:	d3f9      	bcc.n	80002f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000302:	4a0b      	ldr	r2, [pc, #44]	; (8000330 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000304:	4c0b      	ldr	r4, [pc, #44]	; (8000334 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000306:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000308:	e001      	b.n	800030e <LoopFillZerobss>

0800030a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800030a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800030c:	3204      	adds	r2, #4

0800030e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800030e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000310:	d3fb      	bcc.n	800030a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000312:	f7ff ffd7 	bl	80002c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000316:	f000 f825 	bl	8000364 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800031a:	f7ff ff91 	bl	8000240 <main>
  bx  lr    
 800031e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000320:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000324:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000328:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 800032c:	080003dc 	.word	0x080003dc
  ldr r2, =_sbss
 8000330:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000334:	20000024 	.word	0x20000024

08000338 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000338:	e7fe      	b.n	8000338 <ADC_IRQHandler>
	...

0800033c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800033c:	b480      	push	{r7}
 800033e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000340:	4b06      	ldr	r3, [pc, #24]	; (800035c <HAL_IncTick+0x20>)
 8000342:	781b      	ldrb	r3, [r3, #0]
 8000344:	461a      	mov	r2, r3
 8000346:	4b06      	ldr	r3, [pc, #24]	; (8000360 <HAL_IncTick+0x24>)
 8000348:	681b      	ldr	r3, [r3, #0]
 800034a:	4413      	add	r3, r2
 800034c:	4a04      	ldr	r2, [pc, #16]	; (8000360 <HAL_IncTick+0x24>)
 800034e:	6013      	str	r3, [r2, #0]
}
 8000350:	bf00      	nop
 8000352:	46bd      	mov	sp, r7
 8000354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000358:	4770      	bx	lr
 800035a:	bf00      	nop
 800035c:	20000000 	.word	0x20000000
 8000360:	20000020 	.word	0x20000020

08000364 <__libc_init_array>:
 8000364:	b570      	push	{r4, r5, r6, lr}
 8000366:	4d0d      	ldr	r5, [pc, #52]	; (800039c <__libc_init_array+0x38>)
 8000368:	4c0d      	ldr	r4, [pc, #52]	; (80003a0 <__libc_init_array+0x3c>)
 800036a:	1b64      	subs	r4, r4, r5
 800036c:	10a4      	asrs	r4, r4, #2
 800036e:	2600      	movs	r6, #0
 8000370:	42a6      	cmp	r6, r4
 8000372:	d109      	bne.n	8000388 <__libc_init_array+0x24>
 8000374:	4d0b      	ldr	r5, [pc, #44]	; (80003a4 <__libc_init_array+0x40>)
 8000376:	4c0c      	ldr	r4, [pc, #48]	; (80003a8 <__libc_init_array+0x44>)
 8000378:	f000 f818 	bl	80003ac <_init>
 800037c:	1b64      	subs	r4, r4, r5
 800037e:	10a4      	asrs	r4, r4, #2
 8000380:	2600      	movs	r6, #0
 8000382:	42a6      	cmp	r6, r4
 8000384:	d105      	bne.n	8000392 <__libc_init_array+0x2e>
 8000386:	bd70      	pop	{r4, r5, r6, pc}
 8000388:	f855 3b04 	ldr.w	r3, [r5], #4
 800038c:	4798      	blx	r3
 800038e:	3601      	adds	r6, #1
 8000390:	e7ee      	b.n	8000370 <__libc_init_array+0xc>
 8000392:	f855 3b04 	ldr.w	r3, [r5], #4
 8000396:	4798      	blx	r3
 8000398:	3601      	adds	r6, #1
 800039a:	e7f2      	b.n	8000382 <__libc_init_array+0x1e>
 800039c:	080003d4 	.word	0x080003d4
 80003a0:	080003d4 	.word	0x080003d4
 80003a4:	080003d4 	.word	0x080003d4
 80003a8:	080003d8 	.word	0x080003d8

080003ac <_init>:
 80003ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003ae:	bf00      	nop
 80003b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003b2:	bc08      	pop	{r3}
 80003b4:	469e      	mov	lr, r3
 80003b6:	4770      	bx	lr

080003b8 <_fini>:
 80003b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003ba:	bf00      	nop
 80003bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003be:	bc08      	pop	{r3}
 80003c0:	469e      	mov	lr, r3
 80003c2:	4770      	bx	lr
